/// Private
$_bce-shade-ac: '300' '400' '500' '600' '700';
$_bce-shade-sf: '000' '001' '002' '003' '004' '006' '008' '016' '024';
$_bce-shade-on: 'on1' 'on2' 'on3' 'on4';

@function _bce-color-rgba($c, $opacity) {
  @return unquote('rgba(#{red($c)}, #{green($c)}, #{blue($c)}, #{$opacity})');
}

@function _bce-color-var($name, $shade) {
  @if ($shade != null) {
    $shade: str-slice('000#{$shade}', -3);
  } @else if ($name != background and $name != surface) {
    $shade: '500';
  }

  @if ($name != null) {
    $name: -#{$name};
  }

  @return --bce-c#{$shade}#{$name};
}

@function _bce-color-multiply($color1, $color2) {
  $r: (red($color1) * red($color2) / 255);
  $g: (green($color1) * green($color2) / 255);
  $b: (blue($color1) * blue($color2) / 255);
  @return rgb($r, $g, $b);
}

@mixin _bce-color-shade($name, $shade, $color) {
  #{_bce-color-var($name, $shade)}: #{$color};
}

@mixin _bce-color-define-on($name, $color) {
  @include _bce-color-shade($name, on1, _bce-color-rgba($color, 87%));
  @include _bce-color-shade($name, on2, _bce-color-rgba($color, 60%));
  @include _bce-color-shade($name, on3, _bce-color-rgba($color, 38%));
  @include _bce-color-shade($name, on4, _bce-color-rgba($color, 10%));
}

/// Public
@mixin bce-color-define-background($colors) {
  $c1: nth($colors, 1);
  $c2: nth($colors, 2);

  @include _bce-color-shade(background, 000, $c1);
  @include _bce-color-define-on(background, $c2);
  @include _bce-color-shade(background, null, bce-color(background, 000));
}

@mixin bce-color-define-surface($colors, $mix: #fff) {
  $c1: nth($colors, 1);
  $c2: nth($colors, 2);

  @include _bce-color-shade(surface, 000, $c1);
  @include _bce-color-shade(surface, 001, mix($c1, $mix, 95%));
  @include _bce-color-shade(surface, 002, mix($c1, $mix, 93%));
  @include _bce-color-shade(surface, 003, mix($c1, $mix, 92%));
  @include _bce-color-shade(surface, 004, mix($c1, $mix, 91%));
  @include _bce-color-shade(surface, 006, mix($c1, $mix, 89%));
  @include _bce-color-shade(surface, 008, mix($c1, $mix, 88%));
  @include _bce-color-shade(surface, 016, mix($c1, $mix, 85%));
  @include _bce-color-shade(surface, 024, mix($c1, $mix, 84%));
  @include _bce-color-define-on(surface, $c2);
  @include _bce-color-shade(surface, null, bce-color(surface, 000));

  *[color='surface'] {
    @include bce-color-default(surface);
  }
}

@mixin bce-color-define-accent($colors, $name) {
  $c1: nth($colors, 1);
  $c2: #fff;

  @if (length($colors) > 1) {
    $c2: nth($colors, 2);
  }

  $mix-l: #fff;
  $mix-d: _bce-color-multiply($c1, $c1);

  // @include _bce-color-shade($name, 050, mix($c1, $mix-l, 12%));
  // @include _bce-color-shade($name, 100, mix($c1, $mix-l, 30%));
  // @include _bce-color-shade($name, 200, mix($c1, $mix-l, 50%));
  @include _bce-color-shade($name, 300, mix($c1, $mix-l, 70%));
  @include _bce-color-shade($name, 400, mix($c1, $mix-l, 85%));
  @include _bce-color-shade($name, 500, $c1);
  @include _bce-color-shade($name, 600, mix($c1, $mix-d, 87%));
  @include _bce-color-shade($name, 700, mix($c1, $mix-d, 70%));
  // @include _bce-color-shade($name, 800, mix($c1, $mix-d, 54%));
  // @include _bce-color-shade($name, 900, mix($c1, $mix-d, 24%));
  @include _bce-color-define-on($name, $c2);

  *[color='#{$name}'] {
    @include bce-color-default($name);
  }
}

@mixin bce-color-default($name) {
  $map: $_bce-shade-ac;

  @if $name == surface {
    $map: ();
  }

  @each $shade in join($map, $_bce-shade-on) {
    @include _bce-color-shade(null, $shade, bce-color($name, $shade));
  }
}

@mixin bce-color-default-on($name) {
  @for $i from 1 through length($_bce-shade-ac) {
    $shade: nth($_bce-shade-ac, $i);

    @if $i <= 2 {
      @include _bce-color-shade(null, $shade, bce-color($name, 'on3'));
    } @else if $i <= 4 {
      @include _bce-color-shade(null, $shade, bce-color($name, 'on2'));
    } @else {
      @include _bce-color-shade(null, $shade, bce-color($name, 'on1'));
    }
  }
}

@mixin bce-color-inherit($map: join($_bce-shade-ac, $_bce-shade-on)) {
  @each $shade in $map {
    #{_bce-color-var(null, $shade)}: inherit;
  }
}

@function bce-color($arg1: null, $arg2: null) {
  $name: $arg1;
  $shade: $arg2;

  @if (type-of($arg1) == 'number') {
    $name: null;
    $shade: $arg1;
  }

  @return unquote('var(#{_bce-color-var($name, $shade)})');
}

@function bce-color-on($arg1: null, $arg2: null) {
  $name: $arg1;
  $shade: $arg2;

  @if (type-of($arg1) == 'number') {
    $name: null;
    $shade: $arg1;
  }

  @if ($shade == null) {
    $shade: 1;
  }

  @return bce-color($name, on#{$shade});
}
