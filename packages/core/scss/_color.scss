@function _bce-color-shades-default($color, $font) {
  @return (
    l: lighten($color, 10%),
    n: $color,
    d: darken($color, 10%),
    t: $font
  );
}

@function _bce-color-shades-noop($color, $font) {
  @return ();
}

$_bce-color-shades-default: 'n' !default;
$_bce-color-shades-func: get-function(_bce-color-shades-default) !default;

@mixin bce-color-default($name) {
  $shades: map-keys(call($_bce-color-shades-func, #000, #000));
  @each $key in $shades {
    --bce-color-#{$key}: #{bce-color($name, $key)};
  }
}

@mixin bce-color-define($colors, $name, $shades-func: _bce-color-shades-noop) {
  // Parse arguments
  $color: nth($colors, 1);
  $color-text: #fff;

  @if length($colors) > 1 {
    $color-text: nth($colors, 2);
  }
    
  // Parse shades
  $global-shades: call($_bce-color-shades-func, $color, $color-text);
  $custom-shades: call(get-function($shades-func), $color, $color-text);

  // Define shades
  @include bce-color-define-shades($name, $global-shades);
  @include bce-color-define-shades($name, $custom-shades);
  
  // Define color attribute modifiers
  *[color='#{$name}'] {
    @include bce-color-default($name);
  }
}

@mixin bce-color-define-shades($name, $shades) {
  @each $key, $shade in $shades {
    --bce-color-#{$name}-#{$key}: #{$shade};
  }
}

@function bce-color($name: null, $shade: $_bce-color-shades-default) {
  // Construct var base
  $var-base: --bce-color;
  @if $name {
    $var-base: --bce-color-#{$name};
  }

  // Return css variable
  @return unquote('var(#{$var-base}-#{$shade})');
}

@function bce-color-t($name: null) {
  @return bce-color($name, 't');
}

@function bce-color-l($name: null) {
  @return bce-color($name, 'l');
}

@function bce-color-d($name: null) {
  @return bce-color($name, 'd');
}